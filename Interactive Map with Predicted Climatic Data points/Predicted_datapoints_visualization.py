# -*- coding: utf-8 -*-
"""Predicted Datapoints_Visualization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lhtt9eMBJHOEjo1tVoecE857Qk9p2JEF

Generating an Interactive Map by using predicted Data from Random Forest method
"""

import pandas as pd
import folium
from folium.plugins import BeautifyIcon
from scipy.spatial import distance
import numpy as np
from matplotlib import cm, colors
import random

# Load the uploaded data
file_path = '/content/Existing_IOT_Barcelona (1).xlsx'
data_iot = pd.read_excel(file_path, sheet_name='Sheet1')
data_walls = pd.read_csv('/content/predictions.csv')
solution_data_path = '/content/finaldeneme2_with_locations.xlsx'
solution_data = pd.read_excel(solution_data_path)

# Initialize map
m = folium.Map(location=[data_iot['Latitude'].mean(), data_iot['Longitude'].mean()], zoom_start=12, tiles=None)
folium.TileLayer('CartoDB dark_matter').add_to(m)

# Add a title to the center at the top of the map
html_title = """
<div style='position: fixed; top: 10px; left: 50%; transform: translateX(-50%); z-index:9999; font-size:28px; font-family:"Open Sans", sans-serif; color:white; text-align: center;'>
    MAPPING THE INVISIBLE
</div>
"""
m.get_root().html.add_child(folium.Element(html_title))

# Layers for toggling
walls_layer = folium.FeatureGroup(name="Identified Liminals", control=True, show=False)
connections_layer = folium.FeatureGroup(name="Predictive Connections", control=True, show=False)
sensors_layer = folium.FeatureGroup(name="IoT Sensors", control=True, show=False)
air_plants_layer = folium.FeatureGroup(name="Air Purifying Plants", control=True, show=False)
solar_panels_layer = folium.FeatureGroup(name="Solar Panels", control=True, show=False)
vertical_farms_layer = folium.FeatureGroup(name="Vertical Farms", control=True, show=False)

# Add identified walls to the walls_layer with randomized animation
def add_random_animated_walls(layer):
    walls = list(data_walls.iterrows())
    random.shuffle(walls)  # Shuffle the walls to make animation random
    for idx, (_, row) in enumerate(walls):
        popup_text = f"<b>Wall ID:</b> {row['code']}<br><b>Predicted Temp:</b> {row['Predicted_Temp']}°C<br><b>Predicted AQI:</b> {row['Predicted_AQI']}"
        delay = idx * 100  # Faster animation for walls
        marker_html = f"""
            <div style='animation: fadeIn {delay}ms linear forwards; background:blue; width:16px; height:16px; border-radius:50%; opacity:0;' title='{popup_text}'></div>
        """
        folium.Marker(
            location=[row['Latitude'], row['Longitude']],
            popup=popup_text,
            icon=folium.DivIcon(html=marker_html)
        ).add_to(layer)

# Add IoT sensors to the sensors_layer
for _, row in data_iot.iterrows():
    popup_text = f"<b>Sensor Location:</b> {row['Location']}<br><b>Temperature:</b> {row['Avg Annual Temp (°C)']}°C<br>"
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=popup_text,
        icon=BeautifyIcon(border_color="white", text_color="white", background_color="black", icon_shape="circle"),
    ).add_to(sensors_layer)

# Add predictive connections to the connections_layer with slower, gradual animation
def add_gradual_animated_connections(layer):
    iot_coords = data_iot[['Latitude', 'Longitude']].values
    wall_coords = data_walls[['Latitude', 'Longitude']].values

    cmap = cm.get_cmap('inferno')
    norm = colors.Normalize(vmin=0, vmax=np.max(distance.cdist(wall_coords, iot_coords)))

    for idx, wall in enumerate(wall_coords):
        distances = distance.cdist([wall], iot_coords)[0]
        nearest_indices = np.argsort(distances)[:3]

        for conn_idx, conn in enumerate(nearest_indices):
            iot = iot_coords[conn]
            delay = (idx * 400) + (conn_idx * 200)  # Gradual and slower animation for connections
            line_html = f"""
                <div style='animation: fadeIn {delay}ms linear forwards; opacity:0;'></div>
            """
            folium.PolyLine(
                locations=[wall.tolist(), iot.tolist()],
                color=colors.rgb2hex(cmap(norm(distances[conn]))),
                weight=2,
                opacity=0.5,
                tooltip=line_html
            ).add_to(layer)
# Add solution plots to individual solution layers
def add_solution_plots():
    color_map = {
        "Air Purifying Plants": ("green", air_plants_layer),
        "Solar Panels": ("yellow", solar_panels_layer),
        "Vertical Farms": ("orange", vertical_farms_layer)
    }

    for _, row in solution_data.iterrows():
        color, layer = color_map[row['Solution Type']]
        popup_text = (
            f"<b>Solution Type:</b> {row['Solution Type']}<br>"
            f"<b>Area (m²):</b> {row['Area (m²)']}<br>"
            f"<b>Sun Exposure:</b> {row['Sun Exposure']}<br>"
            f"<b>Total Value:</b> {row['Total Value']}<br>"
            f"<b>Compatible Type:</b> {row['Compatible_Type']}"
        )
        folium.CircleMarker(
            location=[row['latitude'], row['longitude']],
            radius=row['Total Value'] / 1000,  # Scale marker size based on Total Value
            color=color,
            fill=True,
            fill_opacity=0.7,
            fill_color=color,
            popup=folium.Popup(popup_text, max_width=300)
        ).add_to(layer)

# Add a legend to the map
legend_html = """
<div style='position: fixed; bottom: 10px; left: 10px; width: 250px; background-color: rgba(0, 0, 0, 0.7); color: white; z-index:9999; padding: 10px; font-family: "Open Sans", sans-serif; font-size: 14px; border-radius: 5px;'>
    <b>Legend</b><br>
    <div style='display: flex; align-items: center;'><div style='width: 12px; height: 12px; background: blue; border-radius: 50%; margin-right: 8px;'></div>Identified Walls</div>
    <div style='display: flex; align-items: center;'><div style='width: 12px; height: 12px; background: black; border-radius: 50%; margin-right: 8px;'></div>IoT Sensors</div>
    <div style='display: flex; align-items: center;'><div style='width: 12px; height: 12px; background: green; border-radius: 50%; margin-right: 8px;'></div>Air Purifying Plants</div>
    <div style='display: flex; align-items: center;'><div style='width: 12px; height: 12px; background: yellow; border-radius: 50%; margin-right: 8px;'></div>Solar Panels</div>
    <div style='display: flex; align-items: center;'><div style='width: 12px; height: 12px; background: orange; border-radius: 50%; margin-right: 8px;'></div>Vertical Farms</div>
    <div style='display: flex; align-items: center;'><div style='width: 12px; height: 2px; background: #ff5722; margin-right: 8px;'></div>Predictive Connections</div>
</div>
"""
m.get_root().html.add_child(folium.Element(legend_html))

# Add buttons for solution layers
buttons_html = """
<div style='position: fixed; bottom: 50px; left: 50%; transform: translateX(-50%); z-index:9999; background: rgba(0, 0, 0, 0.8); padding: 10px; border-radius: 8px;'>
    <button onclick="toggleLayer('Air Purifying Plants')" style='margin: 5px; background: green; color: white; border: none; padding: 8px; border-radius: 4px;'>Air Purifying Plants</button>
    <button onclick="toggleLayer('Solar Panels')" style='margin: 5px; background: yellow; color: black; border: none; padding: 8px; border-radius: 4px;'>Solar Panels</button>
    <button onclick="toggleLayer('Vertical Farms')" style='margin: 5px; background: orange; color: white; border: none; padding: 8px; border-radius: 4px;'>Vertical Farms</button>
</div>
"""
m.get_root().html.add_child(folium.Element(buttons_html))

# Add animated walls, connections, and solutions
add_random_animated_walls(walls_layer)
add_gradual_animated_connections(connections_layer)
add_solution_plots()

# Add layers
# Add layers to the map
walls_layer.add_to(m)
connections_layer.add_to(m)
sensors_layer.add_to(m)
air_plants_layer.add_to(m)
solar_panels_layer.add_to(m)
vertical_farms_layer.add_to(m)

# Inject CSS for animations and button functionality
css_and_js_code = """
<style>
    @keyframes fadeIn {
        0% { opacity: 0; transform: scale(0.8); }
        100% { opacity: 1; transform: scale(1); }
    }
</style>
<script>
    function toggleLayer(layerName) {
        var layer = document.querySelectorAll("div.leaflet-control-layers-overlays input[type=checkbox]");
        layer.forEach(function(item) {
            if (item.nextSibling.textContent.trim() === layerName) {
                item.click();
            }
        });
    }
</script>
"""
m.get_root().html.add_child(folium.Element(css_and_js_code))

# Add LayerControl for toggling layers
folium.LayerControl(collapsed=False).add_to(m)

# Save the map
map_path = "Final_Barcelona_Identify_Walls_Map.html"
m.save(map_path)
print(f"Map saved to {map_path}.")