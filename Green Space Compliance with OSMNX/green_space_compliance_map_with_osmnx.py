# -*- coding: utf-8 -*-
"""Green Space Compliance Map with OSMNX

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XdZEyBRb-sdPWwyvYBre2rIiNISHg3b9
"""

# Install required libraries
!pip install geopandas shapely matplotlib pandas numpy osmnx

# Import required libraries
import geopandas as gpd
import matplotlib.pyplot as plt
import osmnx as ox
from shapely.geometry import box
import numpy as np
import pandas as pd

# Load parks and gardens data for Barcelona
file_path = '/content/parks_and_gardens_of_barcelona.geojson'
gdf_parks = gpd.read_file(file_path)

# Load the population data for Barcelona
population_data_path = '/content/population_in_barcelona.geojson'
gdf_population = gpd.read_file(population_data_path)

# Define the bounding box for Barcelona
ymax, ymin, xmax, xmin = 41.4689, 41.3152, 2.2285, 2.0699

# Set CRS for accurate area calculations
projected_crs = "EPSG:25831"
gdf_parks = gdf_parks.to_crs(projected_crs)
gdf_population = gdf_population.to_crs(projected_crs)

# Generate a grid of 200x200 meter cells over Barcelona
grid_size = 200  # Grid cell size in meters
xmin_proj, ymin_proj, xmax_proj, ymax_proj = gdf_parks.total_bounds
x_coords = np.arange(xmin_proj, xmax_proj, grid_size)
y_coords = np.arange(ymin_proj, ymax_proj, grid_size)
grid_cells = [box(x, y, x + grid_size, y + grid_size) for x in x_coords for y in y_coords]
gdf_grid = gpd.GeoDataFrame(geometry=grid_cells, crs=projected_crs)

# Mask grid cells to include only areas within Barcelona's urban boundary
barcelona_boundary = gpd.GeoDataFrame(geometry=[gdf_population.unary_union], crs=projected_crs)
gdf_grid = gdf_grid[gdf_grid.intersects(barcelona_boundary.geometry[0])]

# Calculate green space area within each cell using a spatial join
gdf_parks['area_m2'] = gdf_parks.geometry.area
gdf_grid = gdf_grid.sjoin(gdf_parks, how='left', predicate='intersects', rsuffix='_park')

# Fill missing values after join to prevent errors in calculations
gdf_grid['area_m2'] = gdf_grid['area_m2'].fillna(0)

# Calculate total green space per grid cell
gdf_grid['total_green_space'] = gdf_grid.groupby(gdf_grid.index)['area_m2'].transform('sum')

# Spatial join with population data to get population per grid cell
gdf_grid = gdf_grid.sjoin(gdf_population, how='left', predicate='intersects', rsuffix='_pop')
gdf_grid['population'] = gdf_grid['population'].fillna(0)

# Calculate the area of each grid cell (in mÂ²) for population density
gdf_grid['cell_area_m2'] = gdf_grid.geometry.area
gdf_grid['population_density'] = gdf_grid['population'] / gdf_grid['cell_area_m2']

# Calculate green space per capita for each cell
gdf_grid['green_space_per_capita'] = np.where(
    gdf_grid['population'] > 0,
    gdf_grid['total_green_space'] / gdf_grid['population'],
    0  # Assign 0 if there's no population
)

# Classify cells based on green space compliance
gdf_grid['color'] = np.where(
    gdf_grid['population_density'] < 0.1,  # Non-residential or low-density
    'lightgrey',
    np.where(
        gdf_grid['green_space_per_capita'] >= 9,  # Compliant
        'green',
        np.where(
            gdf_grid['green_space_per_capita'] > 0,
            'orange',  # Partially compliant
            'red'  # Non-compliant
        )
    )
)

# Plot the map
fig, ax = plt.subplots(figsize=(12, 10))

# Plot the compliance grid
gdf_grid.plot(ax=ax, color=gdf_grid['color'], alpha=0.7, edgecolor='black', linewidth=0.3)

# Overlay parks with transparency for context
gdf_parks.plot(ax=ax, color='green', alpha=0.5, edgecolor='black', label='Parks and Gardens')

# Customize the map
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.title("Complete Green Space Compliance Map of Barcelona")
plt.legend(handles=[
    plt.Line2D([0], [0], marker='o', color='w', label='Compliant', markerfacecolor='green', markersize=10),
    plt.Line2D([0], [0], marker='o', color='w', label='Partially Compliant', markerfacecolor='orange', markersize=10),
    plt.Line2D([0], [0], marker='o', color='w', label='Non-Compliant', markerfacecolor='red', markersize=10),
    plt.Line2D([0], [0], marker='o', color='w', label='Non-Residential/Low-Density Area', markerfacecolor='lightgrey', markeredgecolor='darkgrey', markersize=10)
])

# Show the map
plt.show()