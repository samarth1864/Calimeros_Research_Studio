# -*- coding: utf-8 -*-
"""Crop Compatibility Heatmap using cosine similarity

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XdZEyBRb-sdPWwyvYBre2rIiNISHg3b9
"""

# Install necessary libraries
!pip install pandas numpy plotly scikit-learn

# Import required libraries
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import plotly.express as px

# Load the datasets
location_data = pd.read_csv('/content/LOCATION-UMAP.csv')
crop_data = pd.read_csv('/content/CROP-UMAP.csv')

# Handle NaN values by replacing them with the mean of each column
location_data = location_data.fillna(location_data.mean())
crop_data = crop_data.fillna(crop_data.mean())

# Compute Cosine Similarity between locations and crops
similarity_matrix = cosine_similarity(location_data, crop_data)

# Convert similarity matrix into a DataFrame for easier analysis
similarity_df = pd.DataFrame(
    similarity_matrix,
    index=[f"Location {i}" for i in range(len(location_data))],
    columns=[f"Crop {i}" for i in range(len(crop_data))]
)

# Visualize the Similarity Matrix
fig = px.imshow(
    similarity_df.values,
    labels=dict(x="Crops", y="Locations", color="Similarity"),
    x=similarity_df.columns,  # All crops
    y=similarity_df.index,  # All locations
    color_continuous_scale="Viridis"
)

# Adjust layout for proper crop spacing on the x-axis
fig.update_layout(
    title="Crop-Location Similarity Heatmap",
    autosize=True,
    xaxis=dict(
        title="Crops",
        title_font=dict(size=14),
        tickangle=45,  # Rotate crop labels for better readability
        tickmode="linear",  # Ensures consistent tick placement
        dtick=1,  # Set spacing between ticks (every crop)
    ),
    yaxis=dict(
        title="Locations",
        title_font=dict(size=14),
    ),
    height=600,  # Keep height the same for the y-axis
    width=600,  # Dynamically adjust width based on content
)

# Create the heatmap
fig = px.imshow(
    similarity_df.values,
    labels=dict(x="Crops", y="Locations", color="Similarity"),
    x=similarity_df.columns,  # All crops
    y=similarity_df.index,  # All locations
    color_continuous_scale="Viridis"
)

# Add the layout adjustment for squeezed squares
fig.update_layout(
    title="Crop-Location Similarity Heatmap",
    autosize=True,
    xaxis=dict(
        title="Crops",
        title_font=dict(size=14),
        tickangle=45,  # Rotate crop labels for readability
        tickmode="linear",
        dtick=1,  # Ensure all crops are labeled
    ),
    yaxis=dict(
        title="Locations",
        title_font=dict(size=14),
    ),
    height=400,  # Reduce height to compress the y-axis (locations)
    width=400,  # Increase width to stretch the x-axis (crops)
)

# Show the heatmap
fig.show()

